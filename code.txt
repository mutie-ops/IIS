      'Cookie':'PeopleEssUser=AQAAANCMnd8BFdERjHoAwE_Cl'
                 '-sBAAAAc0cWPyQK0UeWfJy4o7fwDwAAAAACAAAAAAAQZgAAAAEAACAAAABq5Ooaxqa12gGTzOztMFl9-NvlLcEegknqrPS7Qi'
                 '-qywAAAAAOgAAAAAIAACAAAABQp1HxbMhwKHlV2a54pg2LpV_GRA0tftHcJh8oLVHIosABAACWctirogwkV8VNS'
                 '-6RHRudEpaPZHVh7uNbxPIyd3ZdgUnqRyLxZeMY0h_F2N_EcL2XfJA3Vy-WMkTThx3Z'
                 '-CjcIEc4uXVhEgn_UDeFU19wCdHDYqmen7eGsI6CF7tLNURcogCWs0OCBh84a8j5UYeIpP0S84lIayDgpCkWC7z5KkEvBeh1wREQTvL2LKQ4BhHTFB7MqMR7pedgvCPbHjzvTcrk8-Xy3C6SywSnWeC3rER5euJE6SWsH1EujA0ccAITad5Be033gmxFfruRpEdfsok6JRIlbJJRB7DTFPhADpuFLRuzfT8tnRs8-Dxc_R9TdXWL7c6typoNupD8Os_rk-Tcx7KogQ5QXkpEBd1gC8s4RLg0cD4fbFRj4ydSZmUIqnwDg6gzLka2BFH0Abqdfv8oQW4BAUq0DAvF_qngMc1rAgWCbHmeAycL5O8sX6WbVXqMvS6Way3qXAWh2tjcP7fcUZipC0j5cmZ8Q1TCjwCG-jh4I09JgfHlosYLgeHaq4cw5724DntrilDv6LpH16JQ5-5pUCVFgtkX32ng-O4dNDZ-3AI7HHAJoRwIW6intVbYmrcQT1PvkVfimPf0QAAAAE28IaYSqkM5gZFoS9InfjTH-9ycVmpW_7YnNR1L9X9F1aCFOd_Sl8fw25wQr0QOdZ_VHkBvprX73plu1ABYX-M; XSRF-TOKEN=nHiil7BzUY1U7D487I7gt-g0Cn0owgDKbnr9C0_tKbwEBMFKf3CWH50mDhfcLv0BLicYiWlkf2Ur4sm65xbOlw2'


PeopleEssUser=AQAAANCMnd8BFdERjHoAwE_Cl-sBAAAAc0cWPyQK0UeWfJy4o7fwDwAAAAACAAAAAAAQZgAAAAEAACAAAABsJ23BTCeJeOEycDSqtXbgGI9UuB50-pl6mPUajch7YQAAAAAOgAAAAAIAACAAAABIqEUlhwVG8oOOx485JhyMkch-F_SWRjPJmc-pAWVoTKABAAB2fAg4I9waSGQx8jJRMlG2KePf2Q8oJlJyxu4hzPr-pPv_2OVrk9Bd8Fs-SKeUhBbx0PMvon9r2U1qhYVqsP1_txujVYVbuZ_xiI3DgUZH6upzM2RN9MIS6aTP1OXj0zXN40JNxvlVQu-UgPqoisJq2A86aAMKUdVtvxfwx0Mn5-kuZ7m6zPhBFXuqk2JVr5j7LAAkkGihn5Kb-hoTJbalnYk6pEXPsSgavkzlVL0JUEUrI0N3K7QUR6wzb_AgStqB360o_EqFH_0drM1GGpieqLmFIjH4gtvwEZmA-9mBiFl1LJCvLaazTmPG9gxeJVnp9fnf1g7L5AYUKwQXZdBApCZmKSusl3Xl_fo347B8QeZfCq1pVxq6bv8YimHwW3jTBZyV9ZzcEQ6x4JOG7s3--kM-Zm0kVOJbUTclQhegHFaITTNLAuJRzNYIp6yd1tb6V20wi5X50D7C1ybbDWF4cbhcSD_xTGbNW5REgZTTYFpqjdHEYQJfT8RoJixl_oQCMrQZkOL6JZaxaVGTqtidfiUVcd0UTM26qZLswNxL_0AAAAAipOIzkvzj7BgpiYlgkSq5UbwhIfRQGonKfUHqkTO58Eily-Dek7cTZHhNuh8bQElm8ahmntR7iorcuwO5Crbw; XSRF-TOKEN=RGW8LEaKRS4CIyQsNmcjIx6KNqI_N5eAb_Qc0liruKfA-VeOIsU0uavV8wlPE3XoaTVapb-SmuvcBEr86ily9g2

 # cookies = {
    #     'PeopleEssUser': 'AQAAANCMnd8BFdERjHoAwE_Cl-sBAAAAc0cWPyQK0UeWfJy4o7fwDwAAAAACAAAAAAAQZgAAAAEAACAAAAAMDekxDHcxmzaU7PA3oCVvBnK3HJSk9w5hxuLZSL5dJgAAAAAOgAAAAAIAACAAAABK0Dr5yWB6_GSdPinF4MdVwNOGpmkQl5hq8KX9cxGgusABAADuUyzJBfjTtyFSs9mHWTL1Dogscmi1_7XdRVw_m4_cV_gHWYOWsFDHXjTK_pK9dlaxsQRkCFnkOeSKa9waJqeBu4ves3uFgDbFNIRulyRUHAqJOYAEn25eh8TIGRgFJrDyvMhKLBinnL5oNo6N4exgCNkR0wHcThRyjd57jmcw9rTNAxwq4DQlAO1uWu4jCgnMUYbz7-XFQINdf6hi5itn5wCaqYa-r02aBybo_3IcTezX_yTM2m3GvTK4WvJw6BxA_vZGybgMY5JXMBJIY4CNQOCwyZJ5L2D8zEvNGvarP5eBdpRWsmx7AsSsFOVEx0tpU9litqWKPVDprmRwqJjTi-e8qSbue6gFp3MQIjVeNEwvLNsUs4Jw4XIIEG_bYSsGC_O2bwEBzz7W91ztqyBYsZ64n-d0Q0r3uYV6VvAXod5oOWO0DYtauR6D7DTjMEO9G3lBEvX2jUYKe-aeVnZsqvbZBLvcWG-WxnUOvfa_f5HIdfI4Q-x40Q5PCPclvwndNyuBChPrOnnnwxGGfzAjHmgrEh5kU74ZLtgYTKsJE4BHiAZzI8ubWn6855wgScVeYZ6gkjG4WhzlCH2zjGNxQAAAAGxhR2uihRFuYGHArky0Yk5LRY9C3-P9NModQqObPj_UMOcbiWHM2sSyG2JpiSG5hdiXkqoS7f8gPEqaim7e2wM',
    #     'XSRF-TOKEN': 'y4V7h7RkS-cmhsc_3CVrHiNRdRZIc8PGAsbDtB73KajGzZ4JRfk4DkZb_WMPfqS3KKvL_6667mfamd45IyBfKg2'
    # }




def get_batch_header_instance_details():
    url = 'http://localhost:9000/api/apibase/ULBATCH/UnitLineBatchHeaderDetails'
    headers = {'Cookie': cookies}
    payload = {}

    response = requests.request('GET', url=url, headers=headers, data=payload)

    print(response.text)
    response_data = response.json()['data']

    # SELECTED_HEADER = []
    #
    # for header_details in response_data:
    #     HEADER_DETAILS = header_details.get("unitLineBatchHeaderID")
    #     if HEADER_DETAILS == 2:
    #         SELECTED_HEADER.append(header_details)
    #
    # print(SELECTED_HEADER)
    # for details in SELECTED_HEADER:
    #     CODE = details.get('code')
    #     SHORT_DESC = details.get('shortDescription')
    #     LONG_DESC = details.get('longDescription')
    #     employee_list = details.get('employeeList')
    #     for employee_details in employee_list:
    #         EMPLOYEE_ID = employee_details.get('employeeID')
    #         EMPLOYEE_CODE = employee_details.get('employeeCode')
    #         EMPLOYEE_NAME = employee_details.get('employeeDisplayName')
    #         field_list = employee_details.get('fieldList')
    #         # print("field_list",field_list)
    #
    #         for fields in field_list:
    #             # print(fields.get('companyruleCode'))
    #             # print(fields.get("payRunDefID"))
    #             LINE_TYPE = fields.get("lineType")
    #             PAYROLL_DEF = fields.get("payrollDefCode")
    #             DATE_WORKED = fields.get("dateWorked")
    #             # print(fields.get("Units"))
    #             # print(fields.get("inputAmount"))
    #             # print(fields.get("chargeoutrate"))
    #             # print(fields.get("jobcostcode"))
    #             # print(fields.get("note"))
    #             # print(fields.get("employeerate"))
    #
    # return (HEADER_DETAILS, CODE, SHORT_DESC, LONG_DESC, EMPLOYEE_ID,
    #         EMPLOYEE_CODE, EMPLOYEE_NAME, LINE_TYPE, PAYROLL_DEF, DATE_WORKED)
    #
get_batch_header_instance_details()
def post_normal_unit_batch():
    characters = string.ascii_letters + string.digits
    random_string = ''.join(random.choice(characters) for _ in range(5))

    url = "http://localhost:9000/api/apibase/ULBATCH/create"
    headers = {
        'Content-Type': 'application/json',
        'Cookie': cookies}
    payload = json.dumps({
        "unitLineBatchHeaderTemplateID": 2,
        "code": random_string.upper(),
        "shortDescription": "Overtime batch",
        "longDescription": "Overtime batch",
        "employeeList": [
            {
                "employeeCode": "E006",
                "fieldList": [
                    {
                        "companyruleCode": "ECO_PAY",
                        "payRunDefCode": "MAIN",
                        "LineType": "EA",
                        "payrollDefCode": "OVERTIME_1_5",
                        "dateWorked": "2023-07-01T00:00:00",
                        "Units": 10,
                        "inputAmount": "",
                        "chargeoutrate": 0,
                        "jobcostcode": "",
                        "note": "",
                        "employeerate": ""
                    }
                ]
            }
        ]
    })
    response = requests.request('POST', url=url, headers=headers, data=payload)
    print(response.text)
    return response.json()['data']


# DATA = post_normal_unit_batch()


# verifying
def verify_unit_batch():
    url = "http://localhost:9000/api/apibase/ULBATCH/verify"
    headers = {
        'Content-Type': 'application/json',
        'Cookie': cookies}
    payload = json.dumps({
        "unitLineBatchHeaderID": DATA['unitLineBatchHeaderID'],
        "Code": DATA['code']
    })

    response = requests.request('POST', url=url, headers=headers, data=payload)
    print(response.text)


# verify_unit_batch()


# PROCESS BATCH
def process_unit_batch():
    url = "http://localhost:9000/api/apibase/ULBATCH/process"

    headers = {
        'Content-Type': 'application/json',
        'Cookie': cookies}
    payload = json.dumps({
        "unitLineBatchHeaderID": DATA['unitLineBatchHeaderID'],
        "Code": DATA['code']
    })

    response = requests.request('POST', url=url, headers=headers, data=payload)
    print(response.text)

# process_unit_batch()

##########################################################################################################
 excel_data = pd.read_excel('C:\\Users\\HP\\PycharmProjects\\IIS\output_excel_file4.xlsx')
    employee_list = []
    for index, row in excel_data.iterrows():
        employee_code = row['Employee ID']
        # date_worked = row['Date Worked']
        units = row['Days Worked']
        # employeerate = row['employeerate']date_worked.strftime('%Y-%m-%d %H:%M:%S')

        field_list = [
            {
                "companyruleCode": "SKANEM_PAY",
                "payRunDefCode": "MAIN",
                "LineType": "EA",
                "payrollDefCode": "BASIC_SALARY",
                "dateWorked": "2023-01-01T00:00:00",
                "Units": units,
                "inputAmount": "",
                "chargeoutrate": 0,

            }
        ]

        employee_entry = {
            "employeeCode": employee_code,
            "fieldList": field_list
        }

        employee_list.append(employee_entry)

    _data = get_unit_batch_template_details()
    random_codes = ''.join(random.choices(string.ascii_uppercase, k=4))